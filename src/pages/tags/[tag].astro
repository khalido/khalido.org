---
import BaseLayout from '../../layouts/BaseLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { CollectionEntry, getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");

  const tags: string[] = [];

  // using .toLowerCase() here to get rid of case sensitivity
  allPosts.forEach((post) => {
    post.data.tags.forEach((tag) => {
      tags.push(tag.toLowerCase());
    });
  });

  // using a new array from a set, we can get rid of duplicate tags
  return Array.from(new Set(tags)).map((tag) => {
    return {
      params: { tag },
      // only keep the blogposts that contain the tag itself
      props: {
        blogposts: allPosts.filter((post) =>
          post.data.tags.map((tag) => tag.toLowerCase()).includes(tag)
        ),
      },
    };
  });
}

interface Props {
  tag: string;
  blogposts: CollectionEntry<"blog">[];
}

const { blogposts } = Astro.props;
---

<BaseLayout>

  <!-- search box -->
  <input class="px-4 py-3 w-80 text-xl" type="text" id="postSearch" placeholder="Search">
  
	  <ul id="searchresults" class="list-none text-lg pt-4 pb-2 px-2">
		{
		  blogposts.map((post) => (
			<li class="py-0.5"><a class="no-underline hover:underline text-gray-800" href={`/blog/${post.slug}`}>{post.data.title}</a>

        <span class="align-middle pl-4 py-0.5">
          {post.data.tags.map((tag) => (
            <a class="pr-2 0.75rem; no-underline opacity-50 text-purple-400 text-sm hover:underline hover:bg-yellow-200" href={`/tags/${tag}`}>{tag}</a>
            ))}
        </span>
        {/* <span class="text-right text-sm"><FormattedDate date={post.data.pubDate} /></span> */}

			</li>
		  ))
		}
	  </ul>


  </BaseLayout>

