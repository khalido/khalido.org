---
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import ContentList from "@components/ContentList.astro";
import { getPreview, sortByDate } from "@scripts/content";
import { getRelatedTags } from "@scripts/tagUtils";

export async function getStaticPaths() {
    const posts = await getCollection("blog", ({ data }) => {
        return import.meta.env.PROD ? data.draft !== true : true;
    });

    // Get all unique tags
    const tags = [...new Set(posts.map((post) => post.data.tags).flat())];

    // Generate paths for single tags
    const singleTagPaths = tags.map((tag) => ({
        params: { tag },
        props: { tags: [tag] },
    }));

    // Generate paths for tag combinations (both orders)
    const combinationPaths = tags.flatMap((tag1) =>
        tags
            .filter((tag2) => tag2 !== tag1)
            .map((tag2) => ({
                params: { tag: `${tag1}+${tag2}` },
                props: { tags: [tag1, tag2].sort() }, // Sort tags for consistency
            })),
    );

    return [...singleTagPaths, ...combinationPaths];
}

const { tags } = Astro.props;
const currentTag = Astro.params.tag;

// If it's a combination of tags, sort them for consistent display
const displayTags = currentTag.includes("+")
    ? currentTag.split("+").sort().join(" + ")
    : currentTag;

// Get all blog posts
const allPosts = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
});

// Filter posts by all specified tags
const taggedPosts = allPosts.filter((post) =>
    tags.every((tag) => post.data.tags?.includes(tag)),
);

// Get related tags (from the first tag if it's a combination)
const relatedTags = getRelatedTags(taggedPosts, tags[0]);

// Prepare content with preview and sort by date
const tagContent = sortByDate(
    await Promise.all(
        taggedPosts.map(async (post) => ({
            id: post.id,
            slug: post.slug,
            data: {
                ...post.data,
                preview: await getPreview(post),
            },
        })),
    ),
);

// Create page title
const pageTitle = `khalido.org: ${displayTags}`;
---

<BaseLayout title={pageTitle}>
    <div class="lg:flex lg:gap-8">
        <div class="lg:w-3/4">
            <div class="mb-8">
                {
                    tags.length === 1 ? (
                        <h1 class="text-3xl">
                            {tagContent.length} posts about "{currentTag}"
                        </h1>
                    ) : (
                        <h1 class="text-2xl">
                            <a
                                href={`/tags/${tags[0]}`}
                                class="text-pink-500 hover:text-pink-600"
                            >
                                "{tags[0]}"
                            </a>
                            {" + "}
                            <a
                                href={`/tags/${tags[1]}`}
                                class="text-pink-500 hover:text-pink-600"
                            >
                                "{tags[1]}"
                            </a>
                            {" ("}
                            {tagContent.length}
                            {")"}
                        </h1>
                    )
                }
            </div>

            <ContentList contents={tagContent} />
        </div>

        <aside class="lg:w-1/4">
            <div class="sticky top-4 space-y-4">
                {
                    tags.length > 1 && (
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h2 class="text-lg font-semibold mb-2">
                                All Posts
                            </h2>
                            <div class="space-y-1">
                                <a
                                    href={`/tags/${tags[0]}`}
                                    class="block text-pink-500 hover:text-pink-600"
                                >
                                    {
                                        allPosts.filter((p) =>
                                            p.data.tags.includes(tags[0]),
                                        ).length
                                    }{" "}
                                    "{tags[0]}" posts
                                </a>
                                <a
                                    href={`/tags/${tags[1]}`}
                                    class="block text-pink-500 hover:text-pink-600"
                                >
                                    {
                                        allPosts.filter((p) =>
                                            p.data.tags.includes(tags[1]),
                                        ).length
                                    }{" "}
                                    "{tags[1]}" posts
                                </a>
                            </div>
                        </div>
                    )
                }

                {
                    relatedTags.length > 0 && (
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h2 class="text-lg font-semibold mb-2">
                                Related Tags
                            </h2>
                            <div class="flex flex-col gap-2">
                                {relatedTags.map((relatedTag) => {
                                    const combinedTags = [
                                        tags[0],
                                        relatedTag,
                                    ].sort();
                                    return (
                                        <a
                                            href={`/tags/${combinedTags.join("+")}`}
                                            class="text-pink-500 hover:text-pink-700"
                                        >
                                            {relatedTag}
                                            <span class="text-gray-500 text-sm">
                                                (
                                                {
                                                    allPosts.filter(
                                                        (post) =>
                                                            post.data.tags.includes(
                                                                tags[0],
                                                            ) &&
                                                            post.data.tags.includes(
                                                                relatedTag,
                                                            ),
                                                    ).length
                                                }
                                                )
                                            </span>
                                        </a>
                                    );
                                })}
                            </div>
                        </div>
                    )
                }
            </div>
        </aside>
    </div>
</BaseLayout>
